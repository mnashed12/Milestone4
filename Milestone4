package Game;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

import com.fasterxml.jackson.databind.ObjectMapper;

import base.Product;
import base.ShoppingCart;
import base.Storefront;
import base.inventorymanager;
import weapons.WeaponsInterface;


public class Game {
	public static void saveToFile(String filename, Product product, boolean append) {
		PrintWriter pw;
		try {
			File file = new File(filename);
			FileWriter fw = new FileWriter(file, append);
			pw = new PrintWriter(fw);
			
			ObjectMapper objectMapper = new ObjectMapper();
			String json = objectMapper.writeValueAsString(product);
			pw.println(json);
			
			pw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
		public static ArrayList<Product> readFromFile(String filename) {
			ArrayList<Product> products = new ArrayList<Product>();
			try {
				File file = new File(filename);
				Scanner s = new Scanner(file);
				
				while(s.hasNext()) {
					String json = s.nextLine();
					ObjectMapper objectMapper = new ObjectMapper();
					Product product = objectMapper.readValue(json, Product.class);
					products.add(product);
				}
				s.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return products;
		}

	
	public static void main(String[] args) {
		Storefront store = new Storefront();
		inventorymanager inventory = new inventorymanager();
		ShoppingCart Cart = new ShoppingCart();
		Product products[] = new Product[6];
		Scanner scnr = new Scanner(System.in);
		
		
		ArrayList<Product>productsList = readFromFile("out.json");														//Read products from the file
																																										store.startupStore(products);
		System.out.println("Hello! Welcome to Storefront, press the q key to view the store or p to exit");				//prompt user to enter store or leave
		String userinput = scnr.nextLine();
		if (userinput.equals("q")) 
		{																			
				System.out.println(productsList);
		}
		else {																	
			System.out.println("You can only view the store for now");		
		}
		
		System.out.println("Add an item to your cart by typing the name");
		userinput = scnr.nextLine();
		for (int x=0;x<=products.length;++x) 
		{																												//loop as many times as there are items
		if (userinput.equals(products[x].getName())) 
		{
			Cart.purchaseProduct(products[x]);																			//add item to cart																			
			break;
		} 
		}
		
		System.out.println(" ");
		System.out.println("Your shopping cart contains " + Cart.viewCart());											//viewCart
		System.out.println("To purchase items in shopping cart, type purchase or to remove the item type remove");		//purchase or remove items from shopping cart
		for(int x = 0;x<products.length;++x) {																		
		if (scnr.nextLine().equals("remove"))  {																																			
			store.purchaseProduct(products[x]);
			System.out.println("Thank you for your purchase");
		} 
		System.out.println("To view your inventory, type view or else the store will close");	
		if (scnr.nextLine().equals("view")) {																		
			System.out.println(inventory.viewInventory());
			} 
		}
		scnr.close();
		
	}
}
package base;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;

import com.fasterxml.jackson.databind.ObjectMapper;

import Armor.HeavyArmor;
import Armor.LightArmor;
import Health.Health;
import weapons.Axe;
import weapons.Gun;

public class JsonFiles {
	public static void saveToFile(String filename, Product product, boolean append) {
		PrintWriter pw;
		try {
			//Create a file File to write
			File file = new File(filename);
			FileWriter fw = new FileWriter(file, append);
			pw = new PrintWriter(fw);
			
			//Write Product as JSON
			ObjectMapper objectMapper = new ObjectMapper();																	//Object used to read/write JSON
			String json = objectMapper.writeValueAsString(product);
			pw.println(json);
			
			pw.close();
		} catch (IOException e) {
			//print exception
			e.printStackTrace();
		}
	}
		public static ArrayList<Product> readFromFile(String filename) {
			ArrayList<Product> products = new ArrayList<Product>();
			try {
				//Open the file File to read
				File file = new File(filename);
				Scanner s = new Scanner(file);
				
				//Create a list of products by reading JSON file
				while(s.hasNext()) {
					String json = s.nextLine();
					ObjectMapper objectMapper = new ObjectMapper();
					Product product = objectMapper.readValue(json, Product.class);
					products.add(product);
				}
				s.close();
				//print exception
			} catch (IOException e) {
				e.printStackTrace();
			}
			//return list of products
			return products;
		}
	
	public static void main(String[] args) {
		Product[] product = new Product[6];
		product[0] = new Product("Potion", "heals", 3, 3);
		product[1] = new Gun("Gun", "shoot em down", 50, 1);
		product[2] = new Axe("Axe", "good for chopping", 10, 4);
		product[3] = new LightArmor("Light_armor", "provides some protection", 12, 11);
		product[4] = new HeavyArmor("Heavy_armor", "provides the best protection", 25, 2);
		product[5] = new Health("Health_pack", "better than a potion", 6, 10);	
		
		for(int x=0;x<6;++x) {
			saveToFile("out.json", product[x], true);
		}
		ArrayList<Product>productsList = readFromFile("out.json");
		for(Product products : productsList) {
			String text = (products.getName() + "," + products.getDescription() + "," + Integer.toString(products.getQuantity()) + "," + Integer.toString(products.getPrice()));
			System.out.println(text);
		}
		
	}

}

package base;
import java.util.ArrayList;

public class ShoppingCart extends Storefront{
	public ArrayList<Product> ShoppingCart;
	
	public ShoppingCart() {
		ShoppingCart = new ArrayList<Product>();
	}
	@Override
	public void purchaseProduct(Product product) {
		ShoppingCart.add(product);
		System.out.println("Item added");
		inventorymanager.addItem(product);
	}
	public void cancelPurchase(Product product) {
		ShoppingCart.remove(product);
	}
	/**
	 * remove everything from shoppingcart
	 */
	public void emptyCart() {
		ShoppingCart.clear();
	}
	/**
	 * view items in shopping cart
	 * @return
	 */
	public String viewCart() {
		return(ShoppingCart.toString());
	}
}
package base;
import weapons.*;

import java.io.FileReader;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;

import Armor.*;
import Health.*;

public class Storefront {
		public void startupStore(Product products[]) {
			products[0] = new Product("Potion", "heals", 3, 3);
			products[1] = new Gun("Gun", "shoot em down", 50, 1);
			products[2] = new Axe("Axe", "good for chopping", 10, 4);
			products[3] = new LightArmor("Light_armor", "provides some protection", 12, 11);
			products[4] = new HeavyArmor("Heavy_armor", "provides the best protection", 25, 2);
			products[5] = new Health("Health_pack", "better than a potion", 6, 10);	
		}
		public void purchaseProduct(Product product) {
			if (product.getQuantity() >= 1) {
			product.setQuantity(product.getQuantity() - 1);
			inventorymanager.addItem(product);
		} else {
			System.out.println("no products avialable");
		}
	}	
		public void cancelPurchase(Product product) {
			product.setQuantity(product.getQuantity() + 1);
			inventorymanager.removeItem(product);
		}
		public void viewStore(Product products[]) {
			System.out.println(products);
		}
		public void viewProductInfo(Product product) {
			System.out.println(product.getName());
			System.out.println(product.getDescription());
			System.out.println(product.getPrice());
			System.out.println(product.getQuantity());		
		}
}
package base;
import java.util.ArrayList;

public class inventorymanager{
		public static ArrayList<Product> inventory;
		
		public inventorymanager() {
			inventory = new ArrayList<Product>();
		}
		public static void removeItem(Product product) {
		inventory.remove(product);
		}
		public static void addItem(Product product) {
				inventory.add(product);		
		}
		public ArrayList<Product> viewInventory() {
			return inventory;
		}
}
package base;

public class Product {	
		public String name;
		private String description;
		private int price;
		private int quantity;

		public Product(String name, String description, int price, int quantity) {
			super();
			this.name = name;
			this.description = description;
			this.price = price;
			this.quantity = quantity; 
		}
		public Product() {
			System.out.println("Product object constructed");
		}			
		public String getName() {
			return name;
		}		
		public void setName(String name) {
			this.name = name;
		}			
		public String getDescription() {
			return description;
		}			
		public void setDescription(String description) {
			this.description = description;
		}		
		public int getPrice() {
			return price;
		}		
		public void setPrice(int price) {
			this.price = price;
		}		
		public int getQuantity() {
			return quantity;
		}		
		public void setQuantity(int quantity) {
			this.quantity = quantity;
		}
		public void displayProductDetails() {
			System.out.println("Product name: " + this.name);
			System.out.println("Product description: " + this.description);
			System.out.println("Product price: " + this.price);
			System.out.println("Product quantity: " + this.quantity);
		}
		public int compareTo(Product product) {
			int value = this.name.compareTo(product.name);
			if(value == 0) {
				return this.name.compareTo(product.name);
			} else {
				return value;
			}
	}
		public String toString() {
			return name;
		}
}
package weapons;
import base.Product;

public class Axe extends Product implements WeaponsInterface, Comparable<Product>{
	public Axe(String name, String description, int price, int quantity) {
		super(name, description, price, quantity);
	}
	
	//add unimplemented methods
	@Override
	public void name() {
		// TODO Auto-generated method stub
		
	}
	@Override
	public int compareTo(Product product) {
		int value = this.name.compareTo(product.name);
		if(value == 0) {
			return this.name.compareTo(product.name);
		} else {
			return value;
		}
	}
}


